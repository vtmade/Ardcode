import React, { useEffect, useRef } from 'react';

// themes: colorful origami petals, rainbow creativity, vibrant paper folds
// visualization: Multi-colored particles form origami-like patterns with rainbow gradations

const ColorfulOrigamiBloom = () => {
  const canvasRef = useRef(null);
  const animationFrameRef = useRef(null);
  const particlesRef = useRef([]);
  const ctxRef = useRef(null);
  const timeRef = useRef(0);
  
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    ctxRef.current = ctx;
    const width = canvas.width = 550;
    const height = canvas.height = 550;
    const centerX = width / 2;
    const centerY = height / 2;
    
    const PARTICLE_COUNT = 25000;
    const FORM_SCALE = 2.8;
    const particles = [];
    particlesRef.current = particles;
    
    // Origami color palette - vibrant paper colors
    const origamiColors = [
      [255, 87, 87],   // Coral red
      [255, 154, 0],   // Orange
      [255, 206, 84],  // Yellow
      [129, 236, 236], // Cyan
      [116, 185, 255], // Light blue
      [162, 155, 254], // Purple
      [255, 118, 117], // Pink
      [46, 213, 115],  // Green
      [0, 210, 211],   // Teal
      [255, 159, 243], // Magenta
    ];
    
    // Initialize particles with color assignments
    for (let i = 0; i < PARTICLE_COUNT; i++) {
      const theta = Math.random() * Math.PI * 2;
      const r = Math.pow(Math.random(), 0.3) * FORM_SCALE * 0.6 * 150;
      const height = (Math.random() * 2 - 1) * FORM_SCALE * 0.4;
      
      // Assign colors based on angle to create origami fold patterns
      const angleSection = Math.floor((theta / (Math.PI * 2)) * 8) % 8;
      const heightSection = Math.floor((height + FORM_SCALE * 0.4) / (FORM_SCALE * 0.8) * 3);
      const colorIndex = (angleSection + heightSection * 2) % origamiColors.length;
      
      const angle = theta;
      const dist = r / 150;
      const flow = Math.sin(angle * 3 + height * 3) * 0.025;
      const counterFlow = Math.cos(angle * 3 - height * 3) * 0.025;
      const blend = (Math.sin(height * Math.PI * 1.5) + 1) * 0.5;
      const combinedFlow = flow * blend + counterFlow * (1 - blend);
      
      const dx = r * Math.cos(theta);
      const dy = r * Math.sin(theta);
      const containment = Math.pow(Math.min(1, dist / (FORM_SCALE * 0.9)), 3);
      const pull = containment * 0.08;
      
      particles.push({
        x: centerX + dx + (dx * combinedFlow) - (dx * pull),
        y: centerY + dy + (dy * combinedFlow) - (dy * pull),
        z: height,
        initialR: r,
        initialTheta: theta,
        initialHeight: height,
        color: origamiColors[colorIndex],
        colorIndex: colorIndex,
        foldPhase: Math.random() * Math.PI * 2
      });
    }
    
    let lastFrameTime = 0;
    const targetFPS = 15;
    const frameInterval = 1000 / targetFPS;
    
    function animate(currentTime) {
      if (!lastFrameTime) {
        lastFrameTime = currentTime;
      }
      
      const deltaTime = currentTime - lastFrameTime;
      
      if (deltaTime >= frameInterval) {
        timeRef.current += 0.008;
        
        // Gradient background that shifts colors
        const bgGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, width * 0.7);
        const bgHue = (timeRef.current * 10) % 360;
        bgGradient.addColorStop(0, `hsla(${bgHue}, 20%, 94%, 0.95)`);
        bgGradient.addColorStop(1, `hsla(${(bgHue + 60) % 360}, 25%, 92%, 0.9)`);
        
        ctx.fillStyle = bgGradient;
        ctx.fillRect(0, 0, width, height);
        
        particles.forEach((particle, index) => {
          const dx = particle.x - centerX;
          const dy = particle.y - centerY;
          const dist = Math.sqrt(dx * dx + dy * dy) / 150;
          const angle = Math.atan2(dy, dx);
          const height = particle.z / (FORM_SCALE * 0.4);
          
          // Enhanced flow with origami fold simulation
          const foldInfluence = Math.sin(timeRef.current * 0.3 + particle.foldPhase) * 0.02;
          const flow = Math.sin(angle * 4 - timeRef.current * 0.8 + height * 4) * (0.02 + foldInfluence);
          const counterFlow = Math.cos(angle * 4 + timeRef.current * 0.6 - height * 4) * (0.02 + foldInfluence);
          
          const blend = (Math.sin(height * Math.PI * 1.2) + 1) * 0.5;
          const combinedFlow = flow * blend + counterFlow * (1 - blend);
          
          // Dynamic containment creates origami-like folding
          const containment = Math.pow(Math.min(1, dist / (FORM_SCALE * 0.85)), 2.5);
          const pull = containment * (0.12 + Math.sin(timeRef.current * 0.4) * 0.03);
          
          particle.x = particle.x + (dx * combinedFlow) - (dx * pull);
          particle.y = particle.y + (dy * combinedFlow) - (dy * pull);
          particle.z = particle.z + Math.sin(timeRef.current * 0.2 + dist * 3 + particle.foldPhase) * 0.015;
          
          // Update fold phase for color shifting
          particle.foldPhase += 0.001;
          
          // Dynamic color mixing based on position and time
          const depthFactor = 1 + particle.z * 0.8;
          const colorShift = (timeRef.current * 20 + dist * 50 + angle * 30) % 360;
          const baseColor = particle.color;
          
          // Add iridescent effect like folded paper catching light
          const iridescence = Math.sin(colorShift * Math.PI / 180) * 0.3 + 0.7;
          const r = Math.floor(baseColor[0] * iridescence);
          const g = Math.floor(baseColor[1] * iridescence);
          const b = Math.floor(baseColor[2] * iridescence);
          
          const opacity = (0.4 + Math.sin(timeRef.current * 0.5 + particle.foldPhase) * 0.2) * depthFactor;
          const size = Math.max(0.3, (0.8 + Math.sin(particle.foldPhase + timeRef.current) * 0.3) * depthFactor);
          
          // Create origami fold highlight effect
          if (Math.random() < 0.05) {
            ctx.beginPath();
            ctx.arc(particle.x, particle.y, size * 2, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(255, 255, 255, ${opacity * 0.3})`;
            ctx.fill();
          }
          
          // Main particle
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);
          ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${Math.max(0.1, opacity)})`;
          ctx.fill();
          
          // Add paper-like texture with small overlays
          if (index % 8 === 0) {
            ctx.beginPath();
            ctx.arc(particle.x + Math.sin(particle.foldPhase) * 2, 
                   particle.y + Math.cos(particle.foldPhase) * 2, 
                   size * 0.6, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(${Math.floor(r * 1.2)}, ${Math.floor(g * 1.2)}, ${Math.floor(b * 1.2)}, ${opacity * 0.4})`;
            ctx.fill();
          }
        });
        
        lastFrameTime = currentTime - (deltaTime % frameInterval);
      }
      
      animationFrameRef.current = requestAnimationFrame(animate);
    }
    
    animationFrameRef.current = requestAnimationFrame(animate);
    
    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
        animationFrameRef.current = null;
      }
      
      if (ctxRef.current && canvasRef.current) {
        ctxRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);
      }
      
      if (canvasRef.current) {
        canvasRef.current.width = 0;
        canvasRef.current.height = 0;
      }
      
      if (particlesRef.current) {
        particlesRef.current.length = 0;
        particlesRef.current = null;
      }
      
      timeRef.current = 0;
      ctxRef.current = null;
    };
  }, []);
  
  return (
    <div style={{
      width: '550px',
      height: '550px',
      margin: 'auto',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      overflow: 'hidden',
      borderRadius: '8px',
      boxShadow: '0 8px 32px rgba(0,0,0,0.1)'
    }}>
      <canvas
        ref={canvasRef}
        style={{
          display: 'block',
          width: '550px',
          height: '550px',
          borderRadius: '8px'
        }}
      />
    </div>
  );
};

export default ColorfulOrigamiBloom;