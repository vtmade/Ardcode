import { useEffect, useRef } from 'react';

// Themes: strength without violence, victory without anger, alignment with heaven
// Visualization: Particles that transform through gentle convergence, showing how power emerges through harmony

const GlowingEye = () => {
  const canvasRef = useRef(null);
  const animationFrameRef = useRef(null);
  
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    const width = canvas.width = 550;
    const height = canvas.height = 550;
    const centerX = width / 2;
    const centerY = height / 2;
    const radius = width * 0.35;
    
    const PARTICLE_COUNT = 30000;
    const particles = [];
    
    // Each particle begins its journey of transformation
    for (let i = 0; i < PARTICLE_COUNT; i++) {
      const side = i < PARTICLE_COUNT / 2 ? 'dark' : 'light';  // Balance of forces
      const angle = Math.random() * Math.PI * 2;  // Freedom to move
      const r = Math.sqrt(Math.random()) * radius;  // Natural distribution
      
      // Position based on which side of yin yang
      let initialAngle = angle;
      if (side === 'dark') {
        initialAngle = angle < Math.PI ? angle : angle - Math.PI;
      } else {
        initialAngle = angle >= Math.PI ? angle : angle + Math.PI;
      }
      
      const x = centerX + Math.cos(initialAngle) * r;
      const y = centerY + Math.sin(initialAngle) * r;
      
      particles.push({
        x: x,
        y: y,
        side: side,
        initialAngle: initialAngle,
        initialRadius: r,
        convergencePhase: Math.random() * Math.PI * 2,
        convergenceSpeed: 0.005 + Math.random() * 0.005, // Reduced from 0.01-0.02 range to 0.005-0.01
        size: 0.3 + Math.random() * 0.4,
        targetX: x,
        targetY: y,
        transitionPhase: 0,
        transitionSpeed: 0.004 + Math.random() * 0.002 // Reduced from 0.008-0.012 range to 0.004-0.006
      });
    }
    
    let time = 0;
    let isRunning = true;
    let lastTime = 0;
    const FPS = 15; // Set to 15 frames per second
    const frameDelay = 1000 / FPS; // milliseconds between frames
    
    function animate(currentTime) {
      if (!isRunning) return;
      
      // Calculate time elapsed since last frame
      if (!lastTime) lastTime = currentTime;
      const elapsed = currentTime - lastTime;
      
      // Only update if enough time has passed for next frame
      if (elapsed > frameDelay) {
        // Update time with fixed increment based on frame rate
        time += 0.008;
        lastTime = currentTime;
        
        // Clear with trails
        ctx.fillStyle = 'rgba(240, 238, 230, 0.1)';
        ctx.fillRect(0, 0, width, height);
      
      particles.forEach(particle => {
        // Update convergence phase
        particle.convergencePhase += particle.convergenceSpeed;
        particle.transitionPhase += particle.transitionSpeed;
        
        // Calculate convergence cycle
        const convergenceCycle = Math.sin(particle.convergencePhase);
        const isConverging = convergenceCycle > 0;
        
        if (isConverging) {
          // Convergence phase - particles move toward center
          const convergenceStrength = convergenceCycle;
          particle.targetX = centerX;
          particle.targetY = centerY;
          
          // Slow down near center
          const distanceToCenter = Math.sqrt(
            (particle.x - centerX) ** 2 + 
            (particle.y - centerY) ** 2
          );
          const moveSpeed = 0.02 * convergenceStrength * (distanceToCenter / radius);
          
          particle.x += (particle.targetX - particle.x) * moveSpeed;
          particle.y += (particle.targetY - particle.y) * moveSpeed;
        } else {
          // Expansion phase - particles move to opposite side
          const transitionProgress = Math.abs(convergenceCycle);
          
          // Calculate opposite side position
          let newAngle, newRadius;
          
          if (particle.side === 'dark') {
            // Move to light side
            newAngle = particle.initialAngle + Math.PI;
            newRadius = particle.initialRadius;
          } else {
            // Move to dark side
            newAngle = particle.initialAngle + Math.PI;
            newRadius = particle.initialRadius;
          }
          
          // Add yin yang curve effect
          const sCurveEffect = Math.sin(newAngle * 2) * radius * 0.5;
          const curvedAngle = newAngle + (sCurveEffect / newRadius) * transitionProgress;
          
          particle.targetX = centerX + Math.cos(curvedAngle) * newRadius;
          particle.targetY = centerY + Math.sin(curvedAngle) * newRadius;
          
          // Move towards target with easing
          const moveSpeed = 0.03 * transitionProgress;
          particle.x += (particle.targetX - particle.x) * moveSpeed;
          particle.y += (particle.targetY - particle.y) * moveSpeed;
        }
        
        // Determine color based on current position
        const dx = particle.x - centerX;
        const dy = particle.y - centerY;
        const particleAngle = Math.atan2(dy, dx);
        const normalizedAngle = (particleAngle + Math.PI * 2) % (Math.PI * 2);
        const isDarkArea = (normalizedAngle >= Math.PI);
        
        let color, alpha;
        
        if (isConverging) {
          // During convergence, particles maintain their original color
          color = particle.side === 'dark' ? '20, 20, 20' : '90, 90, 90';
          alpha = 0.3 * convergenceCycle;
        } else {
          // During expansion, particles transition to opposite color
          const transition = Math.abs(convergenceCycle);
          if (particle.side === 'dark') {
            color = `${20 + transition * 70}, ${20 + transition * 70}, ${20 + transition * 70}`;
          } else {
            color = `${90 - transition * 70}, ${90 - transition * 70}, ${90 - transition * 70}`;
          }
          alpha = 0.3 * transition;
        }
        
        // Add glow effect near center
        const distanceToCenter = Math.sqrt(
          (particle.x - centerX) ** 2 + 
          (particle.y - centerY) ** 2
        );
        if (distanceToCenter < radius * 0.2) {
          alpha += (1 - distanceToCenter / (radius * 0.2)) * 0.2;
        }
        
        // Draw particle
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fillStyle = `rgba(${color}, ${alpha})`;
        ctx.fill();
      });
      
      // Structure removed - keeping only particle animation
      
      // Draw central convergence point
      const centralGlow = Math.sin(time * 0.1) * 0.5 + 0.5; // Reduced from 0.2 to 0.1 for slower pulsing
      ctx.beginPath();
      ctx.arc(centerX, centerY, 2 + centralGlow * 3, 0, Math.PI * 2);
      ctx.fillStyle = `rgba(51, 51, 51, ${0.1 + centralGlow * 0.2})`;
      ctx.fill();
      }
      
      // Request next frame regardless of whether we rendered this frame
      animationFrameRef.current = requestAnimationFrame(animate);
    }
    
    animate();
    
    return () => {
      isRunning = false;
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
        animationFrameRef.current = null;
      }
      
      if (canvas && ctx) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
      }
      
      particles.length = 0;
    };
  }, []);
  
  return (
    <div style={{
      width: '550px',
      height: '550px',
      margin: 'auto',
      backgroundColor: '#F0EEE6',
      overflow: 'hidden'
    }}>
      <canvas
        ref={canvasRef}
        style={{
          display: 'block',
          width: '550px',
          height: '550px'
        }}
      />
    </div>
  );
};

export default GlowingEye;